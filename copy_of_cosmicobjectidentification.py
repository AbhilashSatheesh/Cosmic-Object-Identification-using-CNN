# -*- coding: utf-8 -*-
"""Copy of CosmicObjectIdentification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K4SIsCvGJEiyARnOFSCXRgQv6-56nUSr
"""

import numpy as np
import cv2
import os
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical
from keras .models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.layers import Dropout,Flatten
from keras.layers import Conv2D,MaxPooling2D
import pickle

path='/content/drive/MyDrive/planetdataset'
testratio=0.2
valratio=0.2
imgdimensions=(32,32,3)
batchsizeval=10
epochsval=4
stepsperepochval=28

count=0
images=[]
classno=[]
mylist=os.listdir(path)
noofclasses=len(mylist)
print("Total classes detected:",noofclasses)
for x in range(noofclasses):
  mypiclist = os.listdir(os.path.join(path, str(x)))
  for y in mypiclist:
      img_path = os.path.join(path, str(x), y)
      curimg = cv2.imread(img_path)
        # Check if image is loaded successfully
      if curimg is not None:
          curimg = cv2.resize(curimg, (32, 32))
          images.append(curimg)
          classno.append(x)
      else:
          print("Error: Unable to load image at path:", img_path)

  print(x,end=" ")
print(" ")
print("Total images im image list:",len(images))
print("Total IDS in classNolist:",len(classno))

images=np.array(images)
classno=np.array(classno)
print(images.shape)

x_train,x_test,y_train,y_test=train_test_split(images,classno,test_size=testratio)
x_train,x_validation,y_train,y_validation=train_test_split(x_train,y_train,test_size=valratio)
print(x_train.shape)
print(x_test.shape)
print(x_validation.shape)

def preprocessing(img):
  img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  img=cv2.equalizeHist(img)
  img=img/225
  return img

from typing import List
x_train=np.array(list(map(preprocessing,x_train)))
x_test=np.array(list(map(preprocessing,x_test)))
x_validation=np.array(list(map(preprocessing,x_validation)))

x_train=x_train.reshape(x_train.shape[0],x_train.shape[1],x_train.shape[2],1)
x_test=x_test.reshape(x_test.shape[0],x_test.shape[1],x_test.shape[2],1)
x_validation=x_validation.reshape(x_validation.shape[0],x_validation.shape[1],x_validation.shape[2],1)

datagen=ImageDataGenerator(width_shift_range=0.1,height_shift_range=0.1,zoom_range=0.2,shear_range=0.1,rotation_range=10)
datagen.fit(x_train)

y_train=to_categorical(y_train,noofclasses)
y_test=to_categorical(y_test,noofclasses)
y_validation=to_categorical(y_validation,noofclasses)

def mymodel():
  nooffilters=60
  sizeoffilter1=(5,5)
  sizeoffilter2=(3,3)
  sizeofpool=(2,2)
  noofnodes=500

  model=Sequential()
  model.add((Conv2D(nooffilters,sizeoffilter1,input_shape=(imgdimensions[0],imgdimensions[1],1),activation='relu')))
  model.add((Conv2D(nooffilters,sizeoffilter1,activation='relu')))
  model.add(MaxPooling2D(pool_size=sizeofpool))
  model.add((Conv2D(nooffilters//2,sizeoffilter2,activation='relu')))
  model.add((Conv2D(nooffilters//2,sizeoffilter2,activation='relu')))
  model.add(MaxPooling2D(pool_size=sizeofpool))
  model.add(Dropout(0.5))
  model.add(Flatten())
  model.add(Dense(noofnodes,activation='relu'))
  model.add(Dropout(0.5))
  model.add(Dense(noofclasses,activation='softmax'))
  model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

  return model

model=mymodel()
print(model.summary())
history = model.fit_generator(datagen.flow(x_train, y_train, batch_size=batchsizeval), steps_per_epoch=len(x_train) // batchsizeval, epochs=epochsval, validation_data=(x_validation, y_validation), shuffle=True)

score=model.evaluate(x_test,y_test,verbose=0)
print('Test score=',score[0])
print('Test accuracy=',score[1])

pickle_out=open("model_trained.p","wb")
pickle.dump(model,pickle_out)
pickle_out.close()

from decimal import Decimal

input_image_location=r"/content/drive/MyDrive/test/test/Mars.jpg"
threshold=0.65
category=["Earth","Mars"]

pickle_in=open("model_trained.p","rb")
model=pickle.load(pickle_in)

from google.colab.patches import cv2_imshow
import cv2

while True:
    imgoriginal = cv2.imread(input_image_location)

    if imgoriginal is None:
        print("Error: Unable to read the image. Please check the file path or image format.")
        break

    img = cv2.resize(imgoriginal, (32, 32))
    img = preprocessing(img)
    img = img.reshape(1, 32, 32, 1)

    predictions = model.predict(img)
    i = np.argmax(predictions)
    probval = np.amax(predictions)

    probval = Decimal(float(probval * 100))
    probval = round(probval, 2)
    ac = str(probval)

    if probval > threshold:
        cv2.putText(imgoriginal, "planet: " + str(category[i]), (50, 70), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 2)
        cv2.putText(imgoriginal, "acc=" + ac + '%', (30, 140), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)
        imgoriginal = cv2.resize(imgoriginal, (int(imgoriginal.shape[1] * 2), int(imgoriginal.shape[0] * 2)))

    cv2_imshow(imgoriginal)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

